{"version":3,"sources":["../../src/app.ts"],"sourcesContent":["import 'reflect-metadata';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\nimport { Routes } from '@interfaces/routes.interface';\nimport { ErrorMiddleware } from '@middlewares/error.middleware';\nimport { logger, stream } from '@utils/logger';\n\nexport class App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 3000;\n\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(morgan(String(LOG_FORMAT), { stream }));\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n    this.app.use(helmet());\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    const apiRouter = express.Router();\n\n    routes.forEach(route => {\n      apiRouter.use('/', route.router);\n    });\n\n    this.app.use('/api/v1', apiRouter);\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(ErrorMiddleware);\n  }\n}\n"],"names":["App","listen","app","port","logger","info","env","getServer","initializeMiddlewares","use","morgan","String","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","helmet","express","json","urlencoded","extended","initializeRoutes","routes","apiRouter","Router","forEach","route","router","initializeErrorHandling","ErrorMiddleware","constructor","NODE_ENV","PORT"],"mappings":";;;;+BAUaA;;;eAAAA;;;QAVN;6DACU;gEACG;+DACD;+DACA;wBAC6C;iCAEhC;wBACD;;;;;;;;;;;;;;;;;;;AAExB,IAAA,AAAMA,MAAN,MAAMA;IAeJC,SAAS;QACd,IAAI,CAACC,GAAG,CAACD,MAAM,CAAC,IAAI,CAACE,IAAI,EAAE;YACzBC,cAAM,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC;YAC/CD,cAAM,CAACC,IAAI,CAAC,CAAC,aAAa,EAAE,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;YAC9CF,cAAM,CAACC,IAAI,CAAC,CAAC,6BAA6B,EAAE,IAAI,CAACF,IAAI,EAAE;YACvDC,cAAM,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC;QACjD;IACF;IAEOE,YAAY;QACjB,OAAO,IAAI,CAACL,GAAG;IACjB;IAEQM,wBAAwB;QAC9B,IAAI,CAACN,GAAG,CAACO,GAAG,CAACC,IAAAA,eAAM,EAACC,OAAOC,kBAAU,GAAG;YAAEC,QAAAA,cAAM;QAAC;QACjD,IAAI,CAACX,GAAG,CAACO,GAAG,CAACK,IAAAA,aAAI,EAAC;YAAEC,QAAQC,cAAM;YAAEC,aAAaC,mBAAW;QAAC;QAC7D,IAAI,CAAChB,GAAG,CAACO,GAAG,CAACU,IAAAA,eAAM;QACnB,IAAI,CAACjB,GAAG,CAACO,GAAG,CAACW,gBAAO,CAACC,IAAI;QACzB,IAAI,CAACnB,GAAG,CAACO,GAAG,CAACW,gBAAO,CAACE,UAAU,CAAC;YAAEC,UAAU;QAAK;IACnD;IAEQC,iBAAiBC,MAAgB,EAAE;QACzC,MAAMC,YAAYN,gBAAO,CAACO,MAAM;QAEhCF,OAAOG,OAAO,CAACC,CAAAA;YACbH,UAAUjB,GAAG,CAAC,KAAKoB,MAAMC,MAAM;QACjC;QAEA,IAAI,CAAC5B,GAAG,CAACO,GAAG,CAAC,WAAWiB;IAC1B;IAEQK,0BAA0B;QAChC,IAAI,CAAC7B,GAAG,CAACO,GAAG,CAACuB,gCAAe;IAC9B;IA3CAC,YAAYR,MAAgB,CAAE;QAJ9B,uBAAOvB,OAAP,KAAA;QACA,uBAAOI,OAAP,KAAA;QACA,uBAAOH,QAAP,KAAA;QAGE,IAAI,CAACD,GAAG,GAAGkB,IAAAA,gBAAO;QAClB,IAAI,CAACd,GAAG,GAAG4B,gBAAQ,IAAI;QACvB,IAAI,CAAC/B,IAAI,GAAGgC,YAAI,IAAI;QAEpB,IAAI,CAAC3B,qBAAqB;QAC1B,IAAI,CAACgB,gBAAgB,CAACC;QACtB,IAAI,CAACM,uBAAuB;IAC9B;AAoCF"}