{"version":3,"sources":["../../../src/middlewares/validation.middleware.ts"],"sourcesContent":["import { plainToInstance } from 'class-transformer';\nimport { validateOrReject, ValidationError } from 'class-validator';\nimport { NextFunction, Request, Response } from 'express';\nimport { HttpException } from '@exceptions/HttpException';\n\nexport const ValidationMiddleware = (type: any, skipMissingProperties = false, whitelist = false, forbidNonWhitelisted = false) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const dto = plainToInstance(type, req.body);\n    validateOrReject(dto, { skipMissingProperties, whitelist, forbidNonWhitelisted })\n      .then(() => {\n        req.body = dto;\n        next();\n      })\n      .catch((errors: ValidationError[]) => {\n        const message = errors.map((error: ValidationError) => Object.values(error.constraints)).join(', ');\n        next(new HttpException(400, message));\n      });\n  };\n};\n"],"names":["ValidationMiddleware","type","skipMissingProperties","whitelist","forbidNonWhitelisted","req","res","next","dto","plainToInstance","body","validateOrReject","then","catch","errors","message","map","error","Object","values","constraints","join","HttpException"],"mappings":";;;;+BAKaA;;;eAAAA;;;kCALmB;gCACkB;+BAEpB;AAEvB,MAAMA,uBAAuB,CAACC,MAAWC,wBAAwB,KAAK,EAAEC,YAAY,KAAK,EAAEC,uBAAuB,KAAK;IAC5H,OAAO,CAACC,KAAcC,KAAeC;QACnC,MAAMC,MAAMC,IAAAA,iCAAe,EAACR,MAAMI,IAAIK,IAAI;QAC1CC,IAAAA,gCAAgB,EAACH,KAAK;YAAEN;YAAuBC;YAAWC;QAAqB,GAC5EQ,IAAI,CAAC;YACJP,IAAIK,IAAI,GAAGF;YACXD;QACF,GACCM,KAAK,CAAC,CAACC;YACN,MAAMC,UAAUD,OAAOE,GAAG,CAAC,CAACC,QAA2BC,OAAOC,MAAM,CAACF,MAAMG,WAAW,GAAGC,IAAI,CAAC;YAC9Fd,KAAK,IAAIe,4BAAa,CAAC,KAAKP;QAC9B;IACJ;AACF"}