{"version":3,"sources":["../../../src/services/auth.service.ts"],"sourcesContent":["import { PrismaClient, User } from '@prisma/client';\nimport { compare, hash } from 'bcrypt';\nimport { sign } from 'jsonwebtoken';\nimport { Service } from 'typedi';\nimport { SECRET_KEY } from '@config';\nimport { AuthUserDto, CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { DataStoredInToken } from '@/interfaces/auth.interface';\nimport { LoginResponse } from '@/interfaces/auth-response.interface';\n\n@Service()\nexport class AuthService {\n  private readonly prisma = new PrismaClient().user;\n\n  // Method to register a new user\n  public async signUp(userData: CreateUserDto): Promise<User> {\n    const findUser: User = await this.prisma.findUnique({ where: { email: userData.email } });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    // Hash the user's password\n    const hashedPassword = await hash(userData.password, 10);\n\n    // Create a new user with the provided data and hashed password\n    const createUserData: Promise<User> = this.prisma.create({ data: { ...userData, password: hashedPassword } });\n\n    return createUserData;\n  }\n\n  public async signIn(userData: AuthUserDto): Promise<LoginResponse> {\n    const findUser = await this.prisma.findUnique({\n      where: { email: userData.email },\n    });\n\n    if (!findUser) {\n      throw new HttpException(401, 'Invalid credentials');\n    }\n\n    const isPasswordValid = await compare(userData.password, findUser.password);\n    if (!isPasswordValid) {\n      throw new HttpException(401, 'Invalid credentials');\n    }\n\n    const token = this.createToken(findUser);\n\n    return {\n      accessToken: token,\n    };\n  }\n\n  public createToken(user: User): string {\n    const dataStoredInToken: DataStoredInToken = {\n      id: user.id,\n    };\n\n    // 1hr\n    const expiresIn = 60 * 60;\n\n    return sign(dataStoredInToken, SECRET_KEY, { expiresIn });\n  }\n}\n"],"names":["AuthService","signUp","userData","findUser","prisma","findUnique","where","email","HttpException","hashedPassword","hash","password","createUserData","create","data","signIn","isPasswordValid","compare","token","createToken","accessToken","user","dataStoredInToken","id","expiresIn","sign","SECRET_KEY","PrismaClient"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXsB;wBACL;8BACT;wBACG;wBACG;+BAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKvB,IAAA,AAAMA,cAAN,MAAMA;IAIX,MAAaC,OAAOC,QAAuB,EAAiB;QAC1D,MAAMC,WAAiB,MAAM,IAAI,CAACC,MAAM,CAACC,UAAU,CAAC;YAAEC,OAAO;gBAAEC,OAAOL,SAASK,KAAK;YAAC;QAAE;QACvF,IAAIJ,UAAU,MAAM,IAAIK,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEN,SAASK,KAAK,CAAC,eAAe,CAAC;QAGxF,MAAME,iBAAiB,MAAMC,IAAAA,YAAI,EAACR,SAASS,QAAQ,EAAE;QAGrD,MAAMC,iBAAgC,IAAI,CAACR,MAAM,CAACS,MAAM,CAAC;YAAEC,MAAM,wCAAKZ;gBAAUS,UAAUF;;QAAiB;QAE3G,OAAOG;IACT;IAEA,MAAaG,OAAOb,QAAqB,EAA0B;QACjE,MAAMC,WAAW,MAAM,IAAI,CAACC,MAAM,CAACC,UAAU,CAAC;YAC5CC,OAAO;gBAAEC,OAAOL,SAASK,KAAK;YAAC;QACjC;QAEA,IAAI,CAACJ,UAAU;YACb,MAAM,IAAIK,4BAAa,CAAC,KAAK;QAC/B;QAEA,MAAMQ,kBAAkB,MAAMC,IAAAA,eAAO,EAACf,SAASS,QAAQ,EAAER,SAASQ,QAAQ;QAC1E,IAAI,CAACK,iBAAiB;YACpB,MAAM,IAAIR,4BAAa,CAAC,KAAK;QAC/B;QAEA,MAAMU,QAAQ,IAAI,CAACC,WAAW,CAAChB;QAE/B,OAAO;YACLiB,aAAaF;QACf;IACF;IAEOC,YAAYE,IAAU,EAAU;QACrC,MAAMC,oBAAuC;YAC3CC,IAAIF,KAAKE,EAAE;QACb;QAGA,MAAMC,YAAY,KAAK;QAEvB,OAAOC,IAAAA,kBAAI,EAACH,mBAAmBI,kBAAU,EAAE;YAAEF;QAAU;IACzD;;QA9CA,uBAAiBpB,UAAS,IAAIuB,oBAAY,GAAGN,IAAI;;AA+CnD"}