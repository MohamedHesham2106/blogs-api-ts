{"version":3,"sources":["../../../src/middlewares/auth.middleware.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { NextFunction, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { HttpException } from '@exceptions/HttpException';\nimport { DataStoredInToken, RequestWithUser } from '@interfaces/auth.interface';\n\n// Function to extract the \"Authorization\" token from the request's headers\nconst getAuthorization = req => {\n  const header = req.header('Authorization');\n  if (header) return header.split('Bearer ')[1];\n\n  return null;\n};\n// Middleware for authenticating requests using a JSON Web Token (JWT)\nexport const AuthMiddleware = async (req: RequestWithUser, res: Response, next: NextFunction) => {\n  try {\n    const Authorization = getAuthorization(req);\n\n    if (Authorization) {\n      // Verify the JWT and extract the user's \"id\" from the token\n      const { id } = (await verify(Authorization, SECRET_KEY)) as DataStoredInToken;\n      const users = new PrismaClient().user;\n      // Find the user based on the \"id\" extracted from the token\n      const findUser = await users.findUnique({ where: { id: String(id) } });\n      if (findUser) {\n        // If the user is found, continue to the next middleware or route\n        next();\n      } else {\n        // If the user is not found, return an \"Unauthorized\" error\n        next(new HttpException(401, 'Unauthorized.'));\n      }\n    } else {\n      // If there is no \"Authorization\" token, return a \"Token Missing\" error\n      next(new HttpException(404, 'Authentication token missing'));\n    }\n  } catch (error) {\n    // If there's an error in token verification, return an \"Unauthorized\" error\n    next(new HttpException(401, 'Unauthorized.'));\n  }\n};\n"],"names":["AuthMiddleware","getAuthorization","req","header","split","res","next","Authorization","id","verify","SECRET_KEY","users","PrismaClient","user","findUser","findUnique","where","String","HttpException","error"],"mappings":";;;;+BAeaA;;;eAAAA;;;wBAfgB;8BAEN;wBACI;+BACG;AAI9B,MAAMC,mBAAmBC,CAAAA;IACvB,MAAMC,SAASD,IAAIC,MAAM,CAAC;IAC1B,IAAIA,QAAQ,OAAOA,OAAOC,KAAK,CAAC,UAAU,CAAC,EAAE;IAE7C,OAAO;AACT;AAEO,MAAMJ,iBAAiB,OAAOE,KAAsBG,KAAeC;IACxE,IAAI;QACF,MAAMC,gBAAgBN,iBAAiBC;QAEvC,IAAIK,eAAe;YAEjB,MAAM,EAAEC,EAAE,EAAE,GAAI,MAAMC,IAAAA,oBAAM,EAACF,eAAeG,kBAAU;YACtD,MAAMC,QAAQ,IAAIC,oBAAY,GAAGC,IAAI;YAErC,MAAMC,WAAW,MAAMH,MAAMI,UAAU,CAAC;gBAAEC,OAAO;oBAAER,IAAIS,OAAOT;gBAAI;YAAE;YACpE,IAAIM,UAAU;gBAEZR;YACF,OAAO;gBAELA,KAAK,IAAIY,4BAAa,CAAC,KAAK;YAC9B;QACF,OAAO;YAELZ,KAAK,IAAIY,4BAAa,CAAC,KAAK;QAC9B;IACF,EAAE,OAAOC,OAAO;QAEdb,KAAK,IAAIY,4BAAa,CAAC,KAAK;IAC9B;AACF"}